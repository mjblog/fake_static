#!/bin/bash
set -e
magic_suffix="_r_e_a_l"
magic_hide_dirname=".fakestatic"
is_dyn_exe=0
is_static_exe=0
is_shared_lib=0
is_symlink=0
symlink_target=""

#接下来的算法：
#通过--cref输出处理的所有文件，去重以后。用file获得所有的动态库。先行放到一个平铺目录下
#如果有重名（文件名相同，但是目录不同），则简单判断两个文件是否相同，不同的情况直接终止操作。

ANALYSIS_FILE_INTERNAL()
{
	local input_file=$1
	local result=`file -b ${input_file}`
	local shared_str="shared object, "
	local static_str=", statically linked, "
	local interp_str=", interpreter "
	local exe_str=" executable, "

	#注意fpie时，主程序也是shared object只是包含了interpreter
	if [[ $result =~ $shared_str ]]
	then
		is_shared_lib=1
		if [[ $result =~ $interp_str ]] ; then
			is_shared_lib=0
			is_dyn_exe=1
		fi
		return 0
	fi

	if [[ $result =~ $exe_str ]]
	then
		if [[ $result =~ $static_str ]] ; then
			is_static_exe=1
		else
			is_dyn_exe=1
		fi
		return 0
	fi
}

ANALYSIS_FILE()
{
	local input_file=$1
	local result=`file -b ${input_file}`
	local symlink_str="symbolic link to "
	is_dyn_exe=0
	is_static_exe=0
	is_shared_lib=0
	is_symlink=0
	symlink_target=""
	
	if [[ $result =~ $symlink_str ]]
	then
		symlink_target=`readlink -f ${input_file}`
		is_symlink=1
		ANALYSIS_FILE_INTERNAL ${symlink_target}
	else
		ANALYSIS_FILE_INTERNAL ${input_file}
	fi

	return 0

}

COPY_FILE_TO()
{
	local target_file=$2/`basename $1`

	if [ -f ${target_file} ] ; then
		echo "found conflicting ${target_file} when copying files"
		exit 1
	fi
	cp $1 $2/
	return 0
}

COPY_NEEDED_FILES()
{
	local input_file=$1
	local target_dir=$2
	local base_input_file=`basename ${input_file}`	
#对符号链接文件，需要特殊处理，需要先将原始文件拷贝过去，然后再用ln -s重新建立符号链接。
	if [ ${is_symlink} -eq 1 ] ; then
		COPY_FILE_TO ${symlink_target} ${target_dir}
		pushd ${target_dir} &> /dev/null
		local base_symlink_target=`basename ${symlink_target}` 
		ln -s ${base_symlink_target} ${base_input_file}
		if [ $? -ne 0 ] ;then
			FATAL_ERROR "can not ln -s ${base_symlink_target} ${base_input_file} in `pwd`"
		fi
		popd &> /dev/null
		return 0
	fi

	if [ ${is_shared_lib} -eq 1 ] ; then
		COPY_FILE_TO ${input_file} ${target_dir}
		return 0
	fi

	if [ ${is_dyn_exe} -eq 1 ] ; then
		COPY_FILE_TO ${input_file} ${target_dir}
		mv ${target_dir}/${base_input_file} ${target_dir}/"${base_input_file}${magic_suffix}"
		if [ "${input_file:0:1}" != "/" ] ; then
			dyn_exe="`pwd`/${input_file}"
		else
			dyn_exe=${input_file}
		fi
		return 0
	fi
}

BUILD_SELF_EXTRACT_SHELL()
{
	local tarfile=$1
	local tar_basename=`basename ${tarfile}`
	local tempfile=`mktemp`
#flock to prevent race condition
	echo '#!/bin/sh
wrap_shell_name=`readlink -f $0`
wrap_shell_lock=${wrap_shell_name}.lock
wrap_shell_dir=`dirname ${wrap_shell_name}`
oldpwd=`pwd`
cd ${wrap_shell_dir}
#remember that users could rename the linked file before run it
wrap_shell_basename=`basename ${wrap_shell_name}`
linked_prog_basename='"${tar_basename}"'
(
	flock -n 9 || exit 1
	ARCHIVE=`awk '"'"'/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }'"'"' "${wrap_shell_name}"`
#when a linked file were copied and renamed to two different name, 
#and then get put into the same dir, and someone start the two simultaneously.
#In this situation, two tar process might get conflicted as they write the same dir.
#I believe this will not happen in real world, so let it be...
	tail -n+$ARCHIVE "${wrap_shell_name}" | tar xzvm > /dev/null
	if [ "${wrap_shell_basename}" != "${linked_prog_basename}" ] ; then
		mv ${linked_prog_basename} ${wrap_shell_basename}
		cd '"${magic_hide_dirname}"'
		mv ${linked_prog_basename} ${wrap_shell_basename}
		cd ${wrap_shell_basename}
		mv ${linked_prog_basename}'"${magic_suffix}"'  ${wrap_shell_basename}'"${magic_suffix}"'
		cd ${oldpwd}
	fi
	exit 0
) 9>${wrap_shell_lock}

if [ $? -eq 0 ] ; then
	flock -u ${wrap_shell_lock} -c ""
	rm ${wrap_shell_lock}
else
#wait till the untar process finish
	while [ -f ${wrap_shell_lock} ]
	do
		sleep 0.001
	done
fi
exec ${wrap_shell_name} "$@"
exit 0
__ARCHIVE_BELOW__' > ${tempfile}

	cat ${tarfile} >> ${tempfile}
	mv ${tempfile} ${tarfile}
	chmod +x ${tarfile}
	return 0
}

BUILD_FAKE_STATIC()
{
	local final_dyn_exe=$1
	local work_dir=$2
	local final_dyn_exe_basename=`basename ${final_dyn_exe}`
	pushd ${work_dir} &> /dev/null

	#build the final program first, then pack it into a self-extract shell.
	mkdir ./${magic_hide_dirname}/${final_dyn_exe_basename} -p
	mv * ./${magic_hide_dirname}/${final_dyn_exe_basename}/
	echo '#!/bin/sh
wrap_shell_name=`readlink -f $0`
exe_name=`basename ${wrap_shell_name}`
exe_dir="`dirname ${wrap_shell_name}`/'${magic_hide_dirname}'/${exe_name}/"

dyn_link=`readelf  ${exe_dir}/${exe_name} -l |grep "\]"`
dyn_link=${dyn_link##*/}
dyn_link=${dyn_link%]}
${exe_dir}/${dyn_link}  --library-path ${exe_dir} ${exe_dir}/"${exe_name}'${magic_suffix}'" "$@"' > ${final_dyn_exe_basename}
	chmod +x ${final_dyn_exe_basename}
	tar czf ${final_dyn_exe} ${final_dyn_exe_basename} ./${magic_hide_dirname}/${final_dyn_exe_basename}/
	BUILD_SELF_EXTRACT_SHELL ${final_dyn_exe}
	popd &> /dev/null
}

CLEAN_ENV()
{

	if [ -f ${temp_file} ] ; then
		rm ${temp_file}
	fi

	if [ -d ${temp_work_dir} ] ; then
		rm ${temp_work_dir} -r
	fi	
}

#我们在封装流程中将real_ld填入了argv0
real_ld=$1
temp_file=`mktemp`
#echo "name is ${real_ld}"
#echo "arg is ffff $@"

unset LD_PRELOAD
shift
${real_ld} "$@" --cref | sed  '1,4d'|awk  '{print $NF}' |sort -u > ${temp_file}
temp_work_dir=`mktemp -d`
dyn_exe=""
while read filename
do
#这里要考虑file确定文件类型。
	ANALYSIS_FILE ${filename}
	#静态链接无需处理
	if [ ${is_static_exe} -eq 1 ] ; then
		break
	else
		COPY_NEEDED_FILES ${filename} ${temp_work_dir}
	fi

done < ${temp_file}

if [ ${is_static_exe} -eq 0 ] ; then
	#do not process shared libs
	if [ "${dyn_exe}_" != "_" ] ; then
		BUILD_FAKE_STATIC ${dyn_exe} ${temp_work_dir}
	fi
fi

CLEAN_ENV
exit 0















